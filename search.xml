<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[用Common Lisp写了一个Scheme解释器]]></title>
      <url>http://yoursite.com/2017/03/26/%E7%94%A8Common-Lisp%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAScheme%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>前段时间，看了《Practical Common Lisp》一书的前一半，书写得很好，其中一章用程序员Mac的故事讲了宏的来龙去脉，令人豁然开朗印象深刻。想着要写点什么练练手，就顺便复习了一下SICP，写了一个简单的Scheme解释器，主要的思路还是eval-apply求值循环，加上数据导向的设计，项目的地址在这里：<a href="https://github.com/CtheSky/Scheme-Interpreter" target="_blank" rel="external">https://github.com/CtheSky/Scheme-Interpreter</a></p>
<p>要说我喜爱的编程语言排行榜，Lisp绝对是排名靠前的，但是种种尝试之后总不觉得像写Python来的方便，其中的原因还是要等我慢慢体会吧。不过学习Lisp的过程改变了我编程的思考方式，就像运动员需要交叉训练一样，我想有时不需要熟练掌握，仅仅了解不同的编程范式，就能改变思考的方式，使人成为比原来更优秀的程序员。</p>
<p>另外我还隐约发现Lisp有一种奇妙的特质，那就是那些理解并喜爱上了Lisp的人很容易变成Lisp传教士，总要想着拯救其他迷途的灵魂。（好了不多说，我要传教去了）</p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Lisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Algorithms Part 2]]></title>
      <url>http://yoursite.com/2017/03/23/Algorithms-Part-2/</url>
      <content type="html"><![CDATA[<p>寒假结束了算法课程的第二部分，这一部分主要关注图，字符串的一些算法，课程质量依旧很好，完成的Assignment也和以前一样写了详细的解答，地址在这里：<a href="https://github.com/CtheSky/Coursera-Algorithms" target="_blank" rel="external">https://github.com/CtheSky/Coursera-Algorithms</a></p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Java </tag>
            
            <tag> Algorithms </tag>
            
            <tag> Coursera </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完成了前端开发的Udacity纳米学位]]></title>
      <url>http://yoursite.com/2016/12/03/%E5%AE%8C%E6%88%90%E4%BA%86%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84Udacity%E7%BA%B3%E7%B1%B3%E5%AD%A6%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>前端的纳米学位一共10个项目，除了和全栈重复的两个项目，剩下的8个做了一周。说实话感觉内容不如全栈开发来的充实。<br>所有的课里有一节讲的意外好的课<a href="https://cn.udacity.com/course/object-oriented-javascript--ud015" target="_blank" rel="external">Object-Oriented JavaScript</a>，<br>由<a href="http://www.hackreactor.com/" target="_blank" rel="external">Hack Reactor</a>联合制作，把怎么用 Javascipt 的原型继承链来正确地实现面向对象讲的十分清楚。<br>私下里也安利了不少人去看这门课。想想时间过得真快，希望以后每天也能写点开心的代码吧。</p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Udacity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完成了全栈网站开发的Udacity纳米学位]]></title>
      <url>http://yoursite.com/2016/11/08/%E5%AE%8C%E6%88%90%E4%BA%86%E5%85%A8%E6%A0%88%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E7%9A%84Udacity%E7%BA%B3%E7%B1%B3%E5%AD%A6%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>花了一个多月的时间完成了Udacity全栈网站开发的纳米学位，觉得挺不错的，学了不少东西。相比Coursera，Udacity专注于CS，提供了每个项目code review的模式，自己从中收获很大。<br>这次纳米学位写了不少项目，<a href="https://github.com/CtheSky/Neighborhood-Map" target="_blank" rel="external">Neighborhood-Map</a>和<a href="https://github.com/CtheSky/Match-Match-Game-API" target="_blank" rel="external">Match-Match Game API</a>是我最喜欢的两个项目。  </p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Udacity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置Grunt进行自动化图片处理遇坑]]></title>
      <url>http://yoursite.com/2016/10/01/%E9%85%8D%E7%BD%AEGrunt%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E9%81%87%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>网站页面需要响应不同设备屏幕大小，为了更好的用户体验往往需要对图片的长宽，大小和质量进行处理，<br>当然总不能一张张图片手动去修改，<code>grunt-responsive-images</code> 就提供了一种自动化的方案，<br>使用<code>ImageMagick</code>或<code>GraphicsMagick</code>图片处理软件，设置处目录，文件后缀名，图片的长宽质量等，<br>批量处理一气呵成。</p>
<p>grunt-reponsive-images 的 Github 主页：<br><a href="https://github.com/andismith/grunt-responsive-images" target="_blank" rel="external">https://github.com/andismith/grunt-responsive-images</a> </p>
<p>一篇介绍该插件的好文链接：<br><a href="https://addyosmani.com/blog/generate-multi-resolution-images-for-srcset-with-grunt/" target="_blank" rel="external">https://addyosmani.com/blog/generate-multi-resolution-images-for-srcset-with-grunt/</a>  </p>
<p>现在开始回归文章主题，愉快的配置完后，居然就踩坑了，报了这样一个错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gm/convert binaries can&apos;t be found</div></pre></td></tr></table></figure></p>
<p>我用的是 <code>ImageMagick</code> 花了我二十多分钟终于在官网上找到解答，原来 IM 从 7.X 的版本开始使用<br><code>magick</code>命令代替了<code>convert</code>， 而插件作者显然是在旧版本进行开发的。 在 Windows 上并不会自动<br>重定向符号，而是需要在安装时勾选 <code>Legacy</code> 选项：<br><img src="/2016/10/01/配置Grunt进行自动化图片处理遇坑/IM_setup.png" alt="IM_setup.png" title=""></p>
<p>最后附上这个问题的官网地址：<br><a href="http://www.imagemagick.org/discourse-server/viewtopic.php?t=29582" target="_blank" rel="external">http://www.imagemagick.org/discourse-server/viewtopic.php?t=29582</a></p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Grunt </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Algorithms Part I]]></title>
      <url>http://yoursite.com/2016/09/26/Algorithms-Part-I/</url>
      <content type="html"><![CDATA[<p>花了三周时间完成了Coursera上的 Algorithms Part I， 配套的教材是《算法》（第四版），讲的很好，收获最大的是课程的 5 个编程作业，<br>提供了完整的测试样例（有些测试样例很恶搞）和一些可视化的 debug 工具。 整理了一下编程作业在 Github 上开了一个仓库：<br><a href="https://github.com/CtheSky/Coursera-Algorithms" target="_blank" rel="external">https://github.com/CtheSky/Coursera-Algorithms</a><br>每个作业也写了一个自己的题解， 等算法课程第二部分开了继续把后面的作业也整理到这个仓库里。</p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Java </tag>
            
            <tag> Algorithms </tag>
            
            <tag> Coursera </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾Coursera上的Scala课程]]></title>
      <url>http://yoursite.com/2016/08/24/%E5%9B%9E%E9%A1%BECoursera%E4%B8%8A%E7%9A%84Scala%E8%AF%BE%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>自从接触了 SICP 之后， 我就成了函数式编程语言的粉丝，一直想尝试一下 Scheme 之外函数式语言，自己又比较喜欢静态类型， 所以就决定是 Scala 了。</p>
<h1 id="Scala-Coursera"><a href="#Scala-Coursera" class="headerlink" title="Scala Coursera"></a>Scala Coursera</h1><p>Scala 的创始人 Martin Odersky 在 Coursera 上亲自授课， 课程练习不少来自 SICP， 自然成为了我的首选，以下是课程主页的链接：<br><a href="https://www.coursera.org/learn/progfun1" target="_blank" rel="external">https://www.coursera.org/learn/progfun1</a></p>
<h1 id="My-solutions"><a href="#My-solutions" class="headerlink" title="My solutions"></a>My solutions</h1><p>差不多一个月前就结束了课程内容的学习， 还花了 350 大洋购入了课程证书， 最近整理了一下 5 次编程作业的内容在<br>Github 上开了一个仓库：<br><a href="https://github.com/CtheSky/Scala-Coursera" target="_blank" rel="external">https://github.com/CtheSky/Scala-Coursera</a><br>每个编程作业都提供了一个可运行的 Demo 在对应文件夹中的README包含了对解题思路的解释。 其实本来想要在博客专门开一个系列的文章来写的，但是想到要翻译成中文比较麻烦，反正会去上这门课的人本来就是英语没问题的，想到了这个绝佳的偷懒借口，就妥妥放弃了一波。</p>
<h1 id="课后感想"><a href="#课后感想" class="headerlink" title="课后感想"></a>课后感想</h1><p>先说说意外的收获吧，那就是通过课程增进了对 Java 的理解。   作为实现了 Java 泛型原型的作者， Martin Odersky 对 Java 的历史包袱做了深入浅出的讲解， 数组类型是协变的， 泛型实现是类型消除的， 通过讲解你就会明白 Java 是如何走到这一尴尬的位置。 另外熟悉了 Scala 中的一系列数据结构提供的高阶操作， 再回过头来看 Java 8 中的 Stream 等新特性， 就会觉得很容易理解使用了。</p>
<p>初识 Scala，说说对 Scala的感受吧。 之前也试过 JVM 上另一种语言 Groovy， 当时写的是一个国企项目， 给我的感觉不是很好， 而且文档比较少，Scala 相比之下写了几天就很顺手了。用了一段时间最大的感觉是 Scala 在一些基本的编程语言特性上实现得很正确，提供了很多好用的语法糖，比如模式匹配，for范围循环自由的迭代变量。 现在对 Scala 了解的还不多，这篇文章就到此结束了，不过以 Scala 给我的感受， 以后会在这门语言上投入更多。</p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Coursera </tag>
            
            <tag> Scala </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Travis CI自动构建博客部署到Github]]></title>
      <url>http://yoursite.com/2016/08/19/%E4%BD%BF%E7%94%A8Travis-CI%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<p>最近用 Hexo 建立了博客，部署在 Github 的个人主页上，Hexo每次生成的站点内容之后需要手动部署，次数多了就显得繁琐，Travis CI 提供了一个简洁的自动化部署方案。</p>
<h2 id="Travis-CI-是什么？"><a href="#Travis-CI-是什么？" class="headerlink" title="Travis CI 是什么？"></a>Travis CI 是什么？</h2><p>Travis CI 是一个开源的持续构建项目，支持自动化测试和部署。 目前已经支持大部分主流语言，和Github集成非常紧密，能够同步你在GitHub上托管的项目，检测到Commit Push之后，就会在几分钟内开始根据你的配置来测试部署你的项目。</p>
<p>目前托管在Github上的大部分知名项目都使用了Travis来做集成测试，<br>使用 Travis CI 的项目可以在README中增加目前版本的构建状态:（Travis 项目设置中的Status Images）<br><img src="/2016/08/19/使用Travis-CI自动构建博客部署到Github/build_passing.png" alt="build_passing.png" title=""><br><img src="/2016/08/19/使用Travis-CI自动构建博客部署到Github/build_failing.png" alt="build_failing.png" title=""></p>
<h2 id="为你的项目启用-Travis-CI"><a href="#为你的项目启用-Travis-CI" class="headerlink" title="为你的项目启用 Travis CI"></a>为你的项目启用 Travis CI</h2><ol>
<li>使用你的GitHub账号登录Travis-CI，确认授权GitHub的相关权限。</li>
<li>登录之后，Travis CI 就会同步你GitHub账号的仓库。然后打开个人页面并给你想要构建的项目启用 Travis CI，就像这样：</li>
<li>添加 <code>.travis.yml</code> 文件到你项目根目录下，这个文件包含构建该项目所需要知道的信息，Travis CI 会按照 <code>.travis.yml</code> 里的配置进行构建。</li>
</ol>
<h2 id="配置-travis-yml-文件"><a href="#配置-travis-yml-文件" class="headerlink" title="配置 .travis.yml 文件"></a>配置 <code>.travis.yml</code> 文件</h2><p>Travis CI 会根据  <code>.travis.yml</code> 中的配置来监听分支，当分支上出现 Commit Push 后，在虚拟机上获取该分支下的项目文件，根据配置进行构建、测试和部署，同时提供虚拟机的运行日志。下面以我的博客为例介绍如何配置：   </p>
<h4 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h4><p>Github 个人主页要求站点内容放在 master 分支下，我把博客的源文件放在 content 分支下。<br>在 <code>.travis.yml</code> 中加入以下代码，这段配置告诉 Travis CI 这是一个 Node.js项目，当 content 分支出现变化时构建项目， 构建项目前在环境中安装 Hexo， 最后执行 Hexo 生成站点内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">branches:</div><div class="line">  only:</div><div class="line">  - content</div><div class="line">before_install:</div><div class="line">- npm install -g hexo</div><div class="line">- npm install</div><div class="line">install:</div><div class="line">- hexo generate</div></pre></td></tr></table></figure></p>
<h4 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h4><p>部署项目其实可以通命令行一系列 git 命令来完成，但这里 Hexo 提供的 hexo-deployer-git 插件十分简便，首先为 Hexo 安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-deployer-git</div></pre></td></tr></table></figure></p>
<p>在 <code>_config.yml</code> 加入以下代码启用 Hexo 部署插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:CtheSky/CtheSky.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>在 <code>.travis.yml</code> 加入以下代码启用部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script:</div><div class="line">- hexo deploy</div></pre></td></tr></table></figure></p>
<h4 id="设置-Github-Token-给予部署权限"><a href="#设置-Github-Token-给予部署权限" class="headerlink" title="设置 Github Token 给予部署权限"></a>设置 Github Token 给予部署权限</h4><p>就和手动部署需要 SSH 认证一样，Travis CI 也需要得到授权才能修改 Github 仓库， 这里没有选择 SSH 授权而是使用了 Github 提供的 OAuth 认证， 原因是 OAuth认证允许使用一个包含认证信息的 URL， 只需设置 Hexo 插件要部署的 URL 即可，更方便一些。<br>首先在 <a href="https://github.com/settings/tokens" target="_blank" rel="external">Personal access tokens</a> 页面生成一个 Github Token， 设置这个 Token 有读写仓库的权限，使用 Token 时的 URL 格式为 https://<token>:x-oauth-basic@github.com//.git</token></p>
<h4 id="加密-Github-Token"><a href="#加密-Github-Token" class="headerlink" title="加密 Github Token"></a>加密 Github Token</h4><p>到上一步为止其实已经能够完成自动化部署了，但是将 Github Token 明文上传到公开的仓库的话，任何看到这个 Token 的人都有权限来修改你的 Github 仓库。这里 Travis CI 提供一个加密机制， 原理是 我们使用加密过的 Token， Travis CI 在部署时会先解密再使用 Token。 这里需要使用 Travis CI 的命令行工具（Ruby gem）来进行加密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gem install travis</div><div class="line">$ travis login</div></pre></td></tr></table></figure></p>
<p>在项目的根目录下运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ travis encrypt &apos;GH_TOKEN=&lt;TOKEN&gt;&apos; --add</div></pre></td></tr></table></figure></p>
<p>该命令会在 <code>.travis.yml</code> 中加入加密后的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">env:</div><div class="line">  global:</div><div class="line">    secure: sRTHlTTZNVgj9bu1ANpz6lX//l//Q3R+eg/lzqEKthl4TYGHMIwukkn9gRG6BXFQveAU7duvmExb+54vvZxCl0z2+yLIxICn4xdsQSeBD96jCWHcf2Gdg6VgSerIGzCrqPHCRAeRJ2HwgiEjH5OifqewCqAgc6fDMGl5RGTjwevNLWhUA8q3PYoH5wH3u3mdGN/JeiWRmgxSobs/OmHNPBN08syCKbv3w10NQ5WL3Db486rY28oWL/wOUWQSXbT72RajM6l4PPrBmq1ObzLNoHGeFVTa9pE20kyCK5mFUGZNwQk5zpSoRTnVH+Uuqve77+x1dsjVNwxp/Wkm4kCTVSEQkeVsvCkB7hB5n44YlbkXEMfioxTZU2l5l3BURbD61KmV9ZecDgtbBWTcmcrM3GwWTPUquBZyUCNemrY9bIBA5O/dMVGzZXWL9qawdIqbxyvZyZo973EDyssnAST8AyYuKRRQkuP21eDWrLMe3qnykF/3gFoY2x/rZlRaIcoD42NCiU4T/Sn/SaMPZq/gpYUKepSnpwo0ilLNZxv9G15rUIPma9Urg1hGfFH01EDh2KK8KDfcoFlbHYkSEtE05npWoCH3tT1+3Scn1GA8SmMSBjgvVuvSutjUqyaojVPCCOSIP6oA9cTleSJQfbgv9TDWXhGUXHYy25DOV1EC9SM=</div></pre></td></tr></table></figure></p>
<p>最后设置 git 提交的基本信息和 Hexo 部署使用的 URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">before_script:</div><div class="line">- git config --global user.name &apos;CtheSky&apos;</div><div class="line">- git config --global user.email &apos;cthesky@yeah.net&apos;</div><div class="line">- sed -i&apos;&apos; &quot;s~git@github.com:CtheSky/CtheSky.github.io.git~https://$&#123;GH_TOKEN&#125;:x-oauth-basic@github.com/CtheSky/CtheSky.github.io.git~&quot; _config.yml</div></pre></td></tr></table></figure></p>
<p>至此所有配置就全部完成了，以下是我的配置文件，以供参考：<br><a href="https://github.com/CtheSky/CtheSky.github.io/blob/content/.travis.yml" target="_blank" rel="external">.travis.yml</a><br><a href="https://github.com/CtheSky/CtheSky.github.io/blob/content/_config.yml" target="_blank" rel="external">_config.yml</a></p>
]]></content>
      
        <categories>
            
            <category> 写写代码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Travis CI </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开始写博客]]></title>
      <url>http://yoursite.com/2016/08/18/%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p> 半年前就用 jekyll 搭过博客放在 GithubPage 上，开学后各种事情蜂拥而至博客就被放置 play 了。<br> 现在又是快要开学了，大三开始要修的课很少，多了很多自由支配的时间，打算好好看一波书，写一波代码。<br> 这次用 Hexo 重置了博客，重新开始：打算记录自己今后的学习过程，时不时安利一下自己的 Github 项目，<br> 也会写一些生活中的所见所想。</p>
]]></content>
      
        <categories>
            
            <category> 生活杂事 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活杂事 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
